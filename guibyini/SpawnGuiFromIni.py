import tkinter as tk
import config_parser
import widget_count
import gui_controls


class PlaceSettings(object):
    def __init__(self):
        self.anchor = str()
        self.bordermode = str()
        self.height = int()
        self.width = int()
        self.relHeight = float()
        self.relWidth = float()
        self.relX = float()
        self.relY = float()
        self.offsetX = int()
        self.offsetY = int()


class FrameWidget(object):
    def __init__(self):
        self.backgroundColor = str()
        self.borderwidth = int()
        self.colormap = str()
        self.container = str()
        self.cursor = str()
        self.height = int()
        self.highlightBackgroundColor = str()
        self.highlightColor = str()
        self.highlightThickness = int()
        self.padX = int()
        self.padY = int()
        self.relief = str()
        self.takeFocus = str()
        self.visual = str()
        self.width = int()


class MessageWidget(object):
    def __init__(self):
        self.anchor = str()
        self.aspect = str()
        self.backgroundColor = str()
        self.borderwidth = int()
        self.cursor = str()
        self.font = str()
        self.fontSize = int()
        self.foregroundColor = str()
        self.highlightBackground = str()
        self.highlightBackgroundColor = str()
        self.highlightThickness = int()
        self.justify = str()
        self.padX = int()
        self.padY = int()
        self.relief = str()
        self.takeFocus = str()
        self.text = str()
        self.textVariable = str()
        self.width = int()


class TextWidget(object):
    def __init__(self):
        self.autoSeparators = str()
        self.backgroundColor = str()
        self.backgroundStipple = str()
        self.borderwidth = int()
        self.cursor = str()
        self.exportSelection = str()
        self.font = str()
        self.fontSize = int()
        self.foregroundColor = str()
        self.foregroundStipple = str()
        self.height = int()
        self.highlightBackgroundColor = str()
        self.highlightColor = str()
        self.highlightThickness = int()
        self.insertBackground = str()
        self.insertBorderwidth = int()
        self.insertOffTime = int()
        self.insertOnTime = int()
        self.insertWidth = int()
        self.justify = str()
        self.lmargin1 = str()
        self.lmargin2 = str()
        self.maxUndo = int()
        self.padX = int()
        self.padY = int()
        self.offset = str()
        self.overstrike = str()
        self.relief = str()
        self.rmargin = int()
        self.selectBackgroundColor = str()
        self.selectForegroundColor = str()
        self.selectBorderwidth = int()
        self.setGrid = str()
        self.spacing1 = int()
        self.spacing2 = int()
        self.spacing3 = int()
        self.state = str()
        self.tabs = str()
        self.takeFocus = str()
        self.text = str()
        self.underline = str()
        self.undo = str()
        self.width = int()
        self.wrap = str()
        self.xScrollCommand = str()
        self.yScrollCommand = str()


class ButtonWidget(object):
    def __init__(self):
        self.activeBackgroundColor = str()
        self.activeForegroundColor = str()
        self.anchor = str()
        self.backgroundColor = str()
        self.bitmap = str()
        self.borderwidth = int()
        self.command = int()
        self.compound = str()
        self.cursor = str()
        self.default = str()
        self.disabledForeground = str()
        self.font = str()
        self.fontSize = int()
        self.foregroundColor = str()
        self.height = int()
        self.highlightBackgroundColor = str()
        self.highlightColor = str()
        self.highlightThickness = int()
        self.image = str()
        self.justify = str()
        self.overRelief = str()
        self.padX = int()
        self.padY = int()
        self.relief = str()
        self.repeatDelay = int()
        self.repeatInterval = int()
        self.state = str()
        self.takeFocus = str()
        self.text = str()
        self.textVariable = str()
        self.underline = str()
        self.width = int()
        self.wrapLength = int()


class SpawnAppWindow:
    def __init__(self, parent, windowIniFile):
        self.parent = parent
        self.frame = tk.Frame(self.parent)
        self.windowIniFile = windowIniFile

        self.frameCount = widget_count.CountWidgetByType(self.windowIniFile, "frame")
        self.framesCreated = int()
        self.frames = FrameWidget()

        self.messageCount = widget_count.CountWidgetByType(self.windowIniFile, "message")
        self.messageCreated = int()
        self.messages = MessageWidget()

        self.textCount = widget_count.CountWidgetByType(self.windowIniFile, "text")
        self.textCreated = int()
        self.text = MessageWidget()

        self.buttonCount = widget_count.CountWidgetByType(self.windowIniFile, "button")
        self.buttonCreated = int()
        self.buttons = ButtonWidget()

        self.entryCount = widget_count.CountWidgetByType(self.windowIniFile, "entry")
        self.entryCreated = int()

        self.windowSection = str()
        self.initialize()




    def initialize(self):
        self.windowSection = 'main window'
        self.DrawWindow()
        # Add frames
        self.frameCount = widget_count.CountWidgetByType(self.windowIniFile, "frame")
        self.framesCreated = 0
        while self.framesCreated < self.frameCount:
            self.framesCreated += 1
            self.frameSection = "frame" + str(self.framesCreated)
            self.frame[self.framesCreated] = self.DrawFrame()
        # Add buttons
        self.buttonCount = widget_count.CountWidgetByType(self.windowIniFile, "button")
        self.buttonsCreated = 0
        while self.buttonsCreated < self.buttonCount:
            self.buttonsCreated += 1
            self.buttonSection = "button" + str(self.buttonsCreated)
            self.button[self.buttonsCreated] = self.DrawButton()
        # Add messages
        self.messageCount = widget_count.CountWidgetByType(self.windowIniFile, "message")
        self.messageCreated = 0
        while self.messageCreated < self.messageCount:
            self.messageCreated += 1
            self.messageSection = "message" + str(self.messageCreated)
            self.message[self.messageCreated] = self.DrawMessage()
        # Add text
        self.textCount = widget_count.CountWidgetByType(self.windowIniFile, "text")
        self.textCreated = 0
        while self.textCreated < self.textCount:
            self.textCreated += 1
            self.textSection = "text" + str(self.textCreated)
            self.text[self.textCreated] = self.DrawText()




    def DrawWindow(self):
        self.appWindowFrameSizeX = int(config_parser.ConfigSectionMap(self.windowIniFile, self.windowSection, 'size_x'))
        self.appWindowFrameSizeY = int(config_parser.ConfigSectionMap(self.windowIniFile, self.windowSection, 'size_y'))
        self.appWindowPosX = int(config_parser.ConfigSectionMap(self.windowIniFile, self.windowSection, 'pos_x'))
        self.appWindowPosY = int(config_parser.ConfigSectionMap(self.windowIniFile, self.windowSection, 'pos_y'))
        self.parent.geometry("%sx%s+%s+%s" % (self.appWindowFrameSizeX, self.appWindowFrameSizeY, self.appWindowPosX, self.appWindowPosY))
        self.appWindowTitle = config_parser.ConfigSectionMap(self.windowIniFile, self.windowSection, 'title')
        self.parent.title(self.appWindowTitle)
        self.appWindowColor = config_parser.ConfigSectionMap(self.windowIniFile, self.windowSection, 'color')
        self.parent.configure(background=self.appWindowColor)




    def DrawFrame(self):
        self.frame = tk.Frame()
        self.frameBackgroundColor = config_parser.ConfigSectionMap(self.windowIniFile, self.frameSection, 'background color')
        if self.frameBackgroundColor != '': self.frame.config(background=self.frameBackgroundColor)
        self.frameBorderwidth = config_parser.ConfigSectionMap(self.windowIniFile, self.frameSection, 'borderwidth')
        if self.frameBorderwidth != '': self.frame.config(borderwidth=int(self.frameBorderwidth))
        # self.frameClass = config_parser.ConfigSectionMap(self.windowIniFile, self.frameSection, 'class')
        # if self.frameClass != '': self.frame.config(class=self.frameClass)
        self.frameColormap = config_parser.ConfigSectionMap(self.windowIniFile, self.frameSection, 'colormap')
        if self.frameColormap != '': self.frame.config(colormap=self.frameColormap)
        self.frameContainer = config_parser.ConfigSectionMap(self.windowIniFile, self.frameSection, 'container')
        if self.frameContainer != '': self.frame.config(container=self.frameContainer)
        self.frameCursor = config_parser.ConfigSectionMap(self.windowIniFile, self.frameSection, 'cursor')
        if self.frameCursor != '': self.frame.config(cursor=self.frameCursor)
        self.frameHeight = config_parser.ConfigSectionMap(self.windowIniFile, self.frameSection, 'height')
        if self.frameHeight != '': self.frame.config(height=int(self.frameHeight))
        self.frameHighlightBackground = config_parser.ConfigSectionMap(self.windowIniFile, self.frameSection, 'highlight background')
        if self.frameHighlightBackground != '': self.frame.config(highlightbackground=self.frameHighlightBackground)
        self.frameHighlightColor = config_parser.ConfigSectionMap(self.windowIniFile, self.frameSection, 'highlight color')
        if self.frameHighlightColor != '': self.frame.config(highlightcolor=self.frameHighlightColor)
        self.frameHighlightThickness = config_parser.ConfigSectionMap(self.windowIniFile, self.frameSection, 'highlight thickness')
        if self.frameHighlightThickness != '': self.frame.config(highlightthickness=int(self.frameHighlightThickness))
        self.framePadX = config_parser.ConfigSectionMap(self.windowIniFile, self.frameSection, 'padx')
        if self.framePadX != '': self.frame.config(padx=int(self.framePadX))
        self.framePadY = config_parser.ConfigSectionMap(self.windowIniFile, self.frameSection, 'pady')
        if self.framePadY != '': self.frame.config(pady=int(self.framePadY))
        self.frameRelief = config_parser.ConfigSectionMap(self.windowIniFile, self.frameSection, 'relief')
        if self.frameRelief != '': self.frame.config(relief=self.frameRelief)
        self.frameTakeFocus = config_parser.ConfigSectionMap(self.windowIniFile, self.frameSection, 'take focus')
        if self.frameTakeFocus != '': self.frame.config(takefocus=self.frameTakeFocus)
        self.frameVisual = config_parser.ConfigSectionMap(self.windowIniFile, self.frameSection, 'visual')
        if self.frameVisual != '': self.frame.config(visual=self.frameVisual)
        self.frameWidth = config_parser.ConfigSectionMap(self.windowIniFile, self.frameSection, 'width')
        if self.frameWidth != '': self.frame.config(width=int(self.frameWidth))
        self.frame.place()
        self.framePlaceAnchor = config_parser.ConfigSectionMap(self.windowIniFile, self.frameSection, 'place anchor')
        if self.framePlaceAnchor != '': self.frame.place_configure(anchor=self.framePlaceAnchor)
        self.framePlaceBordermode = config_parser.ConfigSectionMap(self.windowIniFile, self.frameSection, 'place bordermode')
        if self.framePlaceBordermode != '': self.frame.place_configure(bordermode=self.framePlaceBordermode)
        self.framePlaceHeight = config_parser.ConfigSectionMap(self.windowIniFile, self.frameSection, 'place height')
        if self.framePlaceHeight != '': self.frame.place_configure(height=int(self.framePlaceHeight))
        self.framePlaceWidth = config_parser.ConfigSectionMap(self.windowIniFile, self.frameSection, 'place width')
        if self.framePlaceWidth != '': self.frame.place_configure(width=int(self.framePlaceWidth))
        self.framePlaceRelHeight = config_parser.ConfigSectionMap(self.windowIniFile, self.frameSection, 'place relheight')
        if self.framePlaceRelHeight != '': self.frame.place_configure(relheight=int(self.framePlaceRelHeight))
        self.framePlaceRelWidth = config_parser.ConfigSectionMap(self.windowIniFile, self.frameSection, 'place relwidth')
        if self.framePlaceRelWidth != '': self.frame.place_configure(relwidth=int(self.framePlaceRelWidth))
        self.framePlaceRelX = config_parser.ConfigSectionMap(self.windowIniFile, self.frameSection, 'place rel x')
        if self.framePlaceRelX != '': self.frame.place_configure(relx=int(self.framePlaceRelX))
        self.framePlaceRelY = config_parser.ConfigSectionMap(self.windowIniFile, self.frameSection, 'place rel y')
        if self.framePlaceRelY != '': self.frame.place_configure(rely=int(self.framePlaceRelY))
        self.framePlaceOffsetX = config_parser.ConfigSectionMap(self.windowIniFile, self.frameSection, 'place offset x')
        if self.framePlaceOffsetX != '': self.frame.place_configure(x=int(self.framePlaceOffsetX))
        self.framePlaceOffsetY = config_parser.ConfigSectionMap(self.windowIniFile, self.frameSection, 'place offset y')
        if self.framePlaceOffsetY != '': self.frame.place_configure(y=int(self.framePlaceOffsetY))




    def DrawMessage(self):
        self.message = tk.Message()
        self.messageAnchor = config_parser.ConfigSectionMap(self.windowIniFile, self.messageSection, 'anchor')
        if self.messageAnchor != "": self.message.config(anchor=self.messageAnchor)
        self.messageAspect = config_parser.ConfigSectionMap(self.windowIniFile, self.messageSection, 'aspect')
        if self.messageAspect != "": self.message.config(aspect=self.messageAspect)
        self.messageBackgroundColor = config_parser.ConfigSectionMap(self.windowIniFile, self.messageSection, 'background color')
        if self.messageBackgroundColor != "": self.message.config(background=self.messageBackgroundColor)
        self.messageBorderWidth = config_parser.ConfigSectionMap(self.windowIniFile, self.messageSection, 'border width')
        if self.messageBorderWidth != "": self.message.config(borderwidth=self.messageBorderWidth)
        self.messageCursor = config_parser.ConfigSectionMap(self.windowIniFile, self.messageSection, 'cursor')
        if self.messageCursor != "": self.message.config(cursor=self.messageCursor)
        self.messageFont = config_parser.ConfigSectionMap(self.windowIniFile, self.messageSection, 'font')
        self.messageFontSize = config_parser.ConfigSectionMap(self.windowIniFile, self.messageSection, 'font size')
        if self.messageFont != "" and self.messageFontSize != "": self.message.config(font=(self.messageFont, int(self.messageFontSize)))
        self.messageForegroundColor = config_parser.ConfigSectionMap(self.windowIniFile, self.messageSection, 'foreground color')
        if self.messageForegroundColor != "": self.message.config(foreground=self.messageForegroundColor)
        self.messageHighlightBackground = config_parser.ConfigSectionMap(self.windowIniFile, self.messageSection, 'highlight background')
        if self.messageHighlightBackground != "": self.message.config(highlightbackground=self.messageHighlightBackground)
        self.messageHighlightBackgroundColor = config_parser.ConfigSectionMap(self.windowIniFile, self.messageSection, 'highlight background color')
        if self.messageHighlightBackgroundColor != "": self.message.config(highlightcolor=self.messageHighlightBackgroundColor)
        self.messageHighlightThickness = config_parser.ConfigSectionMap(self.windowIniFile, self.messageSection, 'highlight thickness')
        if self.messageHighlightThickness != "": self.message.config(highlightthickness=int(self.messageHighlightThickness))
        self.messageJustify = config_parser.ConfigSectionMap(self.windowIniFile, self.messageSection, 'justify')
        if self.messageJustify != "": self.message.config(justify=self.messageJustify)
        self.messagePadX = config_parser.ConfigSectionMap(self.windowIniFile, self.messageSection, 'pad x')
        if self.messagePadX != "": self.message.config(padx=int(self.messagePadX))
        self.messagePadY = config_parser.ConfigSectionMap(self.windowIniFile, self.messageSection, 'pad y')
        if self.messagePadY != "": self.message.config(pady=int(self.messagePadY))
        self.messageRelief = config_parser.ConfigSectionMap(self.windowIniFile, self.messageSection, 'relief')
        if self.messageRelief != "": self.message.config(relief=self.messageRelief)
        self.messageTakeFocus = config_parser.ConfigSectionMap(self.windowIniFile, self.messageSection, 'take focus')
        if self.messageTakeFocus != "": self.message.config(takefocus=self.messageTakeFocus)
        self.messageText = config_parser.ConfigSectionMap(self.windowIniFile, self.messageSection, 'text')
        if self.messageText != "": self.message.config(text=self.messageText)
        self.messageTextVariable = config_parser.ConfigSectionMap(self.windowIniFile, self.messageSection, 'text variable')
        if self.messageTextVariable != "": self.message.config(textvariable=self.messageTextVariable)
        self.messageWidth = config_parser.ConfigSectionMap(self.windowIniFile, self.messageSection, 'width')
        if self.messageWidth != "": self.message.config(width=int(self.messageWidth))
        self.message.place()
        self.messagePlaceAnchor = config_parser.ConfigSectionMap(self.windowIniFile, self.messageSection, 'place anchor')
        if self.messagePlaceAnchor != '': self.message.place_configure(anchor=self.messagePlaceAnchor)
        self.messagePlaceBordermode = config_parser.ConfigSectionMap(self.windowIniFile, self.messageSection, 'place bordermode')
        if self.messagePlaceBordermode != '': self.message.place_configure(bordermode=self.messagePlaceBordermode)
        self.messagePlaceHeight = config_parser.ConfigSectionMap(self.windowIniFile, self.messageSection, 'place height')
        if self.messagePlaceHeight != '': self.message.place_configure(height=int(self.messagePlaceHeight))
        self.messagePlaceRelHeight = config_parser.ConfigSectionMap(self.windowIniFile, self.messageSection, 'place relheight')
        if self.messagePlaceRelHeight != '': self.message.place_configure(relheight=int(self.messagePlaceRelHeight))
        self.messagePlaceWidth = config_parser.ConfigSectionMap(self.windowIniFile, self.messageSection, 'place width')
        if self.messagePlaceWidth != '': self.message.place_configure(width=int(self.messagePlaceWidth))
        self.messagePlaceRelWidth = config_parser.ConfigSectionMap(self.windowIniFile, self.messageSection, 'place relwidth')
        if self.messagePlaceRelWidth != '': self.message.place_configure(relwidth=int(self.messagePlaceRelWidth))
        self.messagePlaceRelX = config_parser.ConfigSectionMap(self.windowIniFile, self.messageSection, 'place rel x')
        if self.messagePlaceRelX != '': self.message.place_configure(relx=int(self.messagePlaceRelX))
        self.messagePlaceRelY = config_parser.ConfigSectionMap(self.windowIniFile, self.messageSection, 'place rel y')
        if self.messagePlaceRelY != '': self.message.place_configure(rely=int(self.messagePlaceRelY))
        self.messagePlaceOffsetX = config_parser.ConfigSectionMap(self.windowIniFile, self.messageSection, 'place offset x')
        if self.messagePlaceOffsetX != '': self.message.place_configure(x=int(self.messagePlaceOffsetX))
        self.messagePlaceOffsetY = config_parser.ConfigSectionMap(self.windowIniFile, self.messageSection, 'place offset y')
        if self.messagePlaceOffsetY != '': self.message.place_configure(y=int(self.messagePlaceOffsetY))




    def DrawText(self):
        self.text = tk.Text()
        self.textAutoSeparators = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'auto separators')
        if self.textAutoSeparators != "": self.text.config(autoseparators=self.textAutoSeparators)
        self.textBackgroundColor = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'background color')
        if self.textBackgroundColor != "": self.text.config(bg=self.textBackgroundColor)
        self.textBgStipple = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'background stipple')
        if self.textBgStipple != "": self.text.config(bgstipple=self.textBgStipple)
        self.textBorderWidth = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'border width')
        if self.textBorderWidth != "": self.text.config(bd=int(self.textBorderWidth))
        self.textFgStipple = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'foreground stipple')
        if self.textFgStipple != "": self.text.config(fgstipple=self.textFgStipple)
        self.textCursor = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'cursor')
        if self.textCursor != "": self.text.config(cursor=self.textCursor)
        self.textExportSelection = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'export selection')
        if self.textExportSelection != "": self.text.config(exportselection=self.textExportSelection)
        self.textFont = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'font')
        self.textFontSize = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'font size')
        if self.textFont != "" and self.textFontSize != "": self.text.config(font=(self.textFont, int(self.textFontSize)))
        self.textForegroundColor = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'foreground color')
        if self.textForegroundColor != "": self.text.config(foreground=self.textForegroundColor)
        self.textForegroundStipple = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'foreground stipple')
        if self.textForegroundStipple != "": self.text.config(fgstipple=self.textForegroundStipple)
        self.textHeight = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'height')
        if self.textHeight != "": self.text.config(height=int(self.textHeight))
        self.textHighlightBackground = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'highlight background')
        if self.textHighlightBackground != "": self.text.config(highlightbackground=self.textHighlightBackground)
        self.textHighlightColor = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'highlight color')
        if self.textHighlightColor != "": self.text.config(highlightcolor=self.textHighlightColor)
        self.textHighlightThickness = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'highlight thickness')
        if self.textHighlightThickness != "": self.text.config(highlightthickness=int(self.textHighlightThickness))
        self.textInsertBackground = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'insert background')
        if self.textInsertBackground != "": self.text.config(insertbackground=self.textInsertBackground)
        self.textInsertBorderwidth = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'insert borderwidth')
        if self.textInsertBorderwidth != "": self.text.config(insertBorderwidth=int(self.textInsertBorderwidth))
        self.textInsertOffTime = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'insert off time')
        if self.textInsertOffTime != "": self.text.config(insertOffTime=int(self.textInsertOffTime))
        self.textInsertOnTime = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'insert on time')
        if self.textInsertOnTime != "": self.text.config(insertOnTime=int(self.textInsertOnTime))
        self.textInsertWidth = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'insert width')
        if self.textInsertWidth != "": self.text.config(insertWidth=int(self.textInsertWidth))
        self.textJustify = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'justify')
        if self.textJustify != "": self.text.config(justify=self.textJustify)  
        self.textLmargin1 = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'lmargin1')
        if self.textLmargin1 != "": self.text.config(lmargin1=int(self.textLmargin1))
        self.textLmargin2 = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'lmargin2')
        if self.textLmargin2 != "": self.text.config(lmargin2=int(self.textLmargin2))
        self.textMaxUndo = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'max undo')
        if self.textMaxUndo != "": self.text.config(maxundo=int(self.textMaxUndo))
        self.textPadX = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'pad x')
        if self.textPadX != "": self.text.config(padx=int(self.textPadX))
        self.textPadY = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'pad y')
        if self.textPadY != "": self.text.config(PadY=int(self.textPadY))
        self.textOffset = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'offset')
        if self.textOffset != "": self.text.config(offset=int(self.textOffset))
        self.textOverstrike = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'overstrike')
        if self.textOverstrike != "": self.text.config(overstrike=self.textOverstrike) 
        self.textRelief = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'relief')
        if self.textRelief != "": self.text.config(offset=self.textRelief) 
        self.textRmargin = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'rmargin')
        if self.textRmargin != "": self.text.config(overstrike=int(self.textRmargin))
        self.textSelectBackgroundColor = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'select background color')
        if self.textSelectBackgroundColor != "": self.text.config(selectbackground=self.textSelectBackgroundColor)
        self.textSelectForegroundColor = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'select background color')
        if self.textSelectForegroundColor != "": self.text.config(selectforeground=self.textSelectForegroundColor)
        self.textSelectBorderwidth = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'select borderwidth')
        if self.textSelectBorderwidth != "": self.text.config(selectborderwidth=int(self.textSelectBorderwidth))
        self.textSetGrid = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'set grid')
        if self.textSetGrid != "": self.text.config(setgrid=self.textSetGrid)
        self.textSpacing1 = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'spacing1')
        if self.textSpacing1 != "": self.text.config(spacing1=int(self.textSpacing1))
        self.textSpacing2 = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'spacing2')
        if self.textSpacing2 != "": self.text.config(spacing2=int(self.textSpacing2))
        self.textSpacing3 = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'spacing3')
        if self.textSpacing3 != "": self.text.config(spacing3=int(self.textSpacing3))
        self.textState = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'state')
        if self.textState != "": self.text.config(state=self.textState)
        self.textTabs = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'tabs')
        if self.textTabs != "": self.text.config(tabs=self.textTabs)
        self.textTakeFocus = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'take focus')
        if self.textTakeFocus != "": self.text.config(takefocus=self.textTakeFocus)
        self.textToDisplay = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'text')
        if self.textToDisplay != "": self.text.insert(tk.INSERT, self.textToDisplay)
        self.textUnderline = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'underline')
        if self.textUnderline != "": self.text.config(underline=self.textUnderline)     
        self.textUndo = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'undo')
        if self.textUndo != "": self.text.config(undo=int(self.textUndo))
        self.textWidth = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'width')
        if self.textWidth != "": self.text.config(width=int(self.textWidth))
        self.textWrap = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'wrap')
        if self.textWrap != "": self.text.config(wrap=self.textWrap)
        self.textScrollX = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'x scroll command')
        if self.textScrollX != "": self.text.config(xscrollcommand=int(self.textScrollX))
        self.textScrollY = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'y scroll command')
        if self.textScrollY != "": self.text.config(yscrollcommand=int(self.textScrollY))
        self.text.place()
        self.textPlaceAnchor = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'place anchor')
        if self.textPlaceAnchor != '': self.text.place_configure(anchor=self.textPlaceAnchor)
        self.textPlaceBordermode = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'place bordermode')
        if self.textPlaceBordermode != '': self.text.place_configure(bordermode=self.textPlaceBordermode)
        self.textPlaceHeight = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'place height')
        if self.textPlaceHeight != '': self.text.place_configure(height=int(self.textPlaceHeight))
        self.textPlaceRelHeight = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'place relheight')
        if self.textPlaceRelHeight != '': self.text.place_configure(relheight=int(self.textPlaceRelHeight))
        self.textPlaceWidth = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'place width')
        if self.textPlaceWidth != '': self.text.place_configure(width=int(self.textPlaceWidth))
        self.textPlaceRelWidth = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'place relwidth')
        if self.textPlaceRelWidth != '': self.text.place_configure(relwidth=int(self.textPlaceRelWidth))
        self.textPlaceRelX = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'place rel x')
        if self.textPlaceRelX != '': self.text.place_configure(relx=int(self.textPlaceRelX))
        self.textPlaceRelY = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'place rel y')
        if self.textPlaceRelY != '': self.text.place_configure(rely=int(self.textPlaceRelY))
        self.textPlaceOffsetX = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'place offset x')
        if self.textPlaceOffsetX != '': self.text.place_configure(x=int(self.textPlaceOffsetX))
        self.textPlaceOffsetY = config_parser.ConfigSectionMap(self.windowIniFile, self.textSection, 'place offset y')
        if self.textPlaceOffsetY != '': self.text.place_configure(y=int(self.textPlaceOffsetY))




    def DrawButton(self):
        self.button = tk.Button()
        self.buttonBackgroundColor = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'background color')
        if self.buttonBackgroundColor != '': self.button.config(background=self.buttonBackgroundColor)
        self.buttonBitmap = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'bitmap')
        if self.buttonBitmap != '': self.button.config(bitmap=self.buttonBitmap)
        self.buttonBorderwidth = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'borderwidth')
        if self.buttonBorderwidth != '': self.button.config(borderwidth=int(self.buttonBorderwidth))
        self.buttonCommand = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'command')
        if self.buttonCommand != '': self.button.config(command=lambda instance=int(self.buttonCommand): gui_controls.callback(self.parent, instance))
        self.buttonCompound = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'compound')
        if self.buttonCompound != '': self.button.config(compound=self.buttonCompound)
        self.buttonCursor = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'cursor')
        if self.buttonCursor != '': self.button.config(cursor=self.buttonCursor)
        self.buttonDefault = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'default')
        if self.buttonDefault != '': self.button.config(default=self.buttonDefault)
        self.buttonDisableForeground = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'disable foreground')
        if self.buttonDisableForeground != '': self.button.config(disableforeground=self.buttonDisableForeground)
        self.buttonFont = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'font')
        self.buttonFontSize = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'font size')
        if self.buttonFont != '': self.button.config(font=(self.buttonFont, int(self.buttonFontSize)))
        self.buttonForegroundColor = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'foreground color')
        if self.buttonForegroundColor != '': self.button.config(foreground=self.buttonForegroundColor)
        self.buttonHeight = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'height')
        if self.buttonHeight != '': self.button.config(height=int(self.buttonHeight))
        self.buttonHighlightBackground = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'highlight background')
        if self.buttonHighlightBackground != '': self.button.config(highlightbackground=self.buttonCommand)
        self.buttonHighlightColor = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'highlight color')
        if self.buttonHighlightColor != '': self.button.config(highlightcolor=self.buttonCommand)
        self.buttonHighlightThickness = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'highlight thinkness')
        if self.buttonHighlightThickness != '': self.button.config(highlightthickness=int(self.buttonHighlightThickness))
        self.buttonImage = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'image')
        if self.buttonImage != '': self.button.config(image=self.buttonImage)
        self.buttonJustify = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'justify')
        if self.buttonJustify != '': self.button.config(justify=self.buttonJustify)
        self.buttonOverRelief = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'over relief')
        if self.buttonOverRelief != '': self.button.config(overrelief=self.buttonOverRelief)
        self.buttonPadX = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'padx')
        if self.buttonPadX != '': self.button.config(padx=int(self.buttonPadX))
        self.buttonPadY = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'pady')
        if self.buttonPadY != '': self.button.config(pady=int(self.buttonPadY))
        self.buttonRelief = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'relief')
        if self.buttonRelief != '': self.button.config(relief=self.buttonRelief)
        self.buttonRepeatDelay = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'repeat delay')
        if self.buttonRepeatDelay != '': self.button.config(repeatdelay=int(self.buttonRepeatDelay))
        self.buttonRepeatInterval = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'repeat interval')
        if self.buttonRepeatInterval != '': self.button.config(repeatinterval=int(self.buttonRepeatInterval))
        self.buttonState = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'state')
        if self.buttonState != '': self.button.config(state=self.buttonState)
        self.buttonTakeFocus = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'take focus')
        if self.buttonTakeFocus != '': self.button.config(takefocus=self.buttonTakeFocus)
        self.buttonText = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'text')
        if self.buttonText != '': self.button.config(text=self.buttonText)
        self.buttonTextVariable = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'text variable')
        if self.buttonTextVariable != '': self.button.config(textvariable=self.buttonTextVariable)
        self.buttonUnderline = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'underline')
        if self.buttonUnderline != '': self.button.config(underline=self.buttonUnderline)
        self.buttonWidth = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'width')
        if self.buttonWidth != '': self.button.config(width=int(self.buttonWidth))
        self.buttonWrapLength = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'wrap length')
        if self.buttonWrapLength != '': self.button.config(wraplength=int(self.buttonWrapLength))
        self.button.place()
        self.buttonPlaceAnchor = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'place anchor')
        if self.buttonPlaceAnchor != '': self.button.place_configure(anchor=self.buttonPlaceAnchor)
        self.buttonPlaceBordermode = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'place bordermode')
        if self.buttonPlaceBordermode != '': self.button.place_configure(bordermode=self.buttonPlaceBordermode)
        self.buttonPlaceHeight = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'place height')
        if self.buttonPlaceHeight != '': self.button.place_configure(height=int(self.buttonPlaceHeight))
        self.buttonPlaceWidth = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'place width')
        if self.buttonPlaceWidth != '': self.button.place_configure(width=int(self.buttonPlaceWidth))
        self.buttonPlaceRelHeight = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'place relheight')
        if self.buttonPlaceRelHeight != '': self.button.place_configure(relheight=int(self.buttonPlaceRelHeight))
        self.buttonPlaceRelWidth = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'place relwidth')
        if self.buttonPlaceRelWidth != '': self.button.place_configure(relwidth=int(self.buttonPlaceRelWidth))
        self.buttonPlaceRelX = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'place rel x')
        if self.buttonPlaceRelX != '': self.button.place_configure(relx=int(self.buttonPlaceRelX))
        self.buttonPlaceRelY = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'place rel y')
        if self.buttonPlaceRelY != '': self.button.place_configure(rely=int(self.buttonPlaceRelY))
        self.buttonPlaceOffsetX = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'place offset x')
        if self.buttonPlaceOffsetX != '': self.button.place_configure(x=int(self.buttonPlaceOffsetX))
        self.buttonPlaceOffsetY = config_parser.ConfigSectionMap(self.windowIniFile, self.buttonSection, 'place offset y')
        if self.buttonPlaceOffsetY != '': self.button.place_configure(y=int(self.buttonPlaceOffsetY))


if __name__ == "__main__":
    app = SpawnAppWindow(None)
    app.title('My OPC Client')
    app.mainloop()