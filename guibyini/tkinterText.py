__author__ = 'chris.maue'

import config_parser

class Text(object):
    def __init__(self):
        self.autoSeparators = str()
        self.backgroundColor = str()
        self.backgroundStipple = str()
        self.borderwidth = int()
        self.cursor = str()
        self.exportSelection = str()
        self.font = str()
        self.fontSize = int()
        self.foregroundColor = str()
        self.foregroundStipple = str()
        self.height = int()
        self.highlightBackgroundColor = str()
        self.highlightColor = str()
        self.highlightThickness = int()
        self.insertBackground = str()
        self.insertBorderwidth = int()
        self.insertOffTime = int()
        self.insertOnTime = int()
        self.insertWidth = int()
        self.justify = str()
        self.lmargin1 = str()
        self.lmargin2 = str()
        self.maxUndo = int()
        self.padX = int()
        self.padY = int()
        self.offset = str()
        self.overstrike = str()
        self.relief = str()
        self.rmargin = int()
        self.selectBackgroundColor = str()
        self.selectForegroundColor = str()
        self.selectBorderwidth = int()
        self.setGrid = str()
        self.spacing1 = int()
        self.spacing2 = int()
        self.spacing3 = int()
        self.state = str()
        self.tabs = str()
        self.takeFocus = str()
        self.text = str()
        self.underline = str()
        self.undo = str()
        self.width = int()
        self.wrap = str()
        self.xScrollCommand = str()
        self.yScrollCommand = str()
        self.iniFile = str()
        self.section = str()

    def read_rettings(self, iniFile, section):
        self.iniFile = iniFile
        self.section = section
        self.autoSeparators = str(config_parser.ConfigSectionMap(self.iniFile, self.section, 'auto separators'))
        self.backgroundColor = str(config_parser.ConfigSectionMap(self.iniFile, self.section, 'background color'))
        self.backgroundStipple = str(config_parser.ConfigSectionMap(self.iniFile, self.section, 'background stipple'))
        self.borderwidth = int(config_parser.ConfigSectionMap(self.iniFile, self.section, 'border width'))
        self.cursor = str(config_parser.ConfigSectionMap(self.iniFile, self.section, 'cursor'))
        self.exportSelection = str(config_parser.ConfigSectionMap(self.iniFile, self.section, 'export selection'))
        self.font = str(config_parser.ConfigSectionMap(self.iniFile, self.section, 'font'))
        self.fontSize = int(config_parser.ConfigSectionMap(self.iniFile, self.section, 'font size'))
        self.foregroundColor = str(config_parser.ConfigSectionMap(self.iniFile, self.section, 'foreground color'))
        self.foregroundStipple = str(config_parser.ConfigSectionMap(self.iniFile, self.section, 'foreground stipple'))
        self.height = int(config_parser.ConfigSectionMap(self.iniFile, self.section, 'height'))
        self.highlightBackgroundColor = str(config_parser.ConfigSectionMap(self.iniFile, self.section, 'highlight background color'))
        self.highlightColor = str(config_parser.ConfigSectionMap(self.iniFile, self.section, 'highlight color'))
        self.highlightThickness = str(config_parser.ConfigSectionMap(self.iniFile, self.section, 'highlight thickness'))
        self.insertBackground = str(config_parser.ConfigSectionMap(self.iniFile, self.section, 'insert background'))
        self.insertBorderwidth = int(config_parser.ConfigSectionMap(self.iniFile, self.section, 'insert border width'))
        self.insertOffTime = int(config_parser.ConfigSectionMap(self.iniFile, self.section, 'insert off time'))
        self.insertOnTime = int(config_parser.ConfigSectionMap(self.iniFile, self.section, 'insert on time'))
        self.insertWidth = int(config_parser.ConfigSectionMap(self.iniFile, self.section, 'insert width'))
        self.justify = str(config_parser.ConfigSectionMap(self.iniFile, self.section, 'justify'))
        self.lmargin1 = int(config_parser.ConfigSectionMap(self.iniFile, self.section, 'lmargin1'))
        self.lmargin2 = int(config_parser.ConfigSectionMap(self.iniFile, self.section, 'lmargin2'))
        self.maxUndo = int(config_parser.ConfigSectionMap(self.iniFile, self.section, 'max undo'))
        self.padX = int(config_parser.ConfigSectionMap(self.iniFile, self.section, 'pad x'))
        self.padY = int(config_parser.ConfigSectionMap(self.iniFile, self.section, 'pad y'))
        self.offset = str(config_parser.ConfigSectionMap(self.iniFile, self.section, 'offset'))
        self.overstrike = str(config_parser.ConfigSectionMap(self.iniFile, self.section, 'overstrike'))
        self.relief = str(config_parser.ConfigSectionMap(self.iniFile, self.section, 'relief'))
        self.rmargin = int(config_parser.ConfigSectionMap(self.iniFile, self.section, 'rmargin'))
        self.selectBackgroundColor =str(config_parser.ConfigSectionMap(self.iniFile, self.section, 'select background color'))
        self.selectForegroundColor = str(config_parser.ConfigSectionMap(self.iniFile, self.section, 'select foreground color'))
        self.selectBorderwidth = int(config_parser.ConfigSectionMap(self.iniFile, self.section, 'select border width'))
        self.setGrid = str(config_parser.ConfigSectionMap(self.iniFile, self.section, 'set grid'))
        self.spacing1 = int(config_parser.ConfigSectionMap(self.iniFile, self.section, 'spacing1'))
        self.spacing2 = int(config_parser.ConfigSectionMap(self.iniFile, self.section, 'spacing2'))
        self.spacing3 = int(config_parser.ConfigSectionMap(self.iniFile, self.section, 'spacing3'))
        self.state = str(config_parser.ConfigSectionMap(self.iniFile, self.section, 'state'))
        self.tabs = str(config_parser.ConfigSectionMap(self.iniFile, self.section, 'tabs'))
        self.takeFocus = str(config_parser.ConfigSectionMap(self.iniFile, self.section, 'take focus'))
        self.text = str(config_parser.ConfigSectionMap(self.iniFile, self.section, 'text'))
        self.underline = str(config_parser.ConfigSectionMap(self.iniFile, self.section, 'underline'))
        self.undo = str(config_parser.ConfigSectionMap(self.iniFile, self.section, 'undo'))
        self.width = int(config_parser.ConfigSectionMap(self.iniFile, self.section, 'width'))
        self.wrap = str(config_parser.ConfigSectionMap(self.iniFile, self.section, 'wrap'))
        self.xScrollCommand = str(config_parser.ConfigSectionMap(self.iniFile, self.section, 'x scroll command'))
        self.yScrollCommand = str(config_parser.ConfigSectionMap(self.iniFile, self.section, 'y scroll command'))
        return self


    def apply_settings(self):
        if self.textAutoSeparators != "":
            self.text.config(autoseparators=self.textAutoSeparators)
        if self.textBackgroundColor != "":
            self.text.config(bg=self.textBackgroundColor)
        if self.textBgStipple != "":
            self.text.config(bgstipple=self.textBgStipple)
        if self.textBorderWidth != "":
            self.text.config(bd=int(self.textBorderWidth))
        if self.textFgStipple != "":
            self.text.config(fgstipple=self.textFgStipple)
        if self.textCursor != "":
            self.text.config(cursor=self.textCursor)
        if self.textExportSelection != "":
            self.text.config(exportselection=self.textExportSelection)
        if self.textFont != "" and self.textFontSize != "":
            self.text.config(font=(self.textFont, int(self.textFontSize)))
        if self.textForegroundColor != "":
            self.text.config(foreground=self.textForegroundColor)
        if self.textForegroundStipple != "":
            self.text.config(fgstipple=self.textForegroundStipple)
        if self.textHeight != "":
            self.text.config(height=int(self.textHeight))
        if self.textHighlightBackground != "":
            self.text.config(highlightbackground=self.textHighlightBackground)
        if self.textHighlightColor != "":
            self.text.config(highlightcolor=self.textHighlightColor)
        if self.textHighlightThickness != "":
            self.text.config(highlightthickness=int(self.textHighlightThickness))
        if self.textInsertBackground != "":
            self.text.config(insertbackground=self.textInsertBackground)
        if self.textInsertBorderwidth != "":
            self.text.config(insertBorderwidth=int(self.textInsertBorderwidth))
        if self.textInsertOffTime != "":
            self.text.config(insertOffTime=int(self.textInsertOffTime))
        if self.textInsertOnTime != "":
            self.text.config(insertOnTime=int(self.textInsertOnTime))
        if self.textInsertWidth != "":
            self.text.config(insertWidth=int(self.textInsertWidth))
        if self.textJustify != "":
            self.text.config(justify=self.textJustify)
        if self.textLmargin1 != "":
            self.text.config(lmargin1=int(self.textLmargin1))
        if self.textLmargin2 != "":
            self.text.config(lmargin2=int(self.textLmargin2))
        if self.textMaxUndo != "":
            self.text.config(maxundo=int(self.textMaxUndo))
        if self.textPadX != "":
            self.text.config(padx=int(self.textPadX))
        if self.textPadY != "":
            self.text.config(PadY=int(self.textPadY))
        if self.textOffset != "":
            self.text.config(offset=int(self.textOffset))
        if self.textOverstrike != "":
            self.text.config(overstrike=self.textOverstrike)
        if self.textRelief != "":
            self.text.config(offset=self.textRelief)
        if self.textRmargin != "":
            self.text.config(overstrike=int(self.textRmargin))
        if self.textSelectBackgroundColor != "":
            self.text.config(selectbackground=self.textSelectBackgroundColor)
        if self.textSelectForegroundColor != "":
            self.text.config(selectforeground=self.textSelectForegroundColor)
        if self.textSelectBorderwidth != "":
            self.text.config(selectborderwidth=int(self.textSelectBorderwidth))
        if self.textSetGrid != "":
            self.text.config(setgrid=self.textSetGrid)
        if self.textSpacing1 != "":
            self.text.config(spacing1=int(self.textSpacing1))
        if self.textSpacing2 != "":
            self.text.config(spacing2=int(self.textSpacing2))
        if self.textSpacing3 != "":
            self.text.config(spacing3=int(self.textSpacing3))
        if self.textState != "":
            self.text.config(state=self.textState)
        if self.textTabs != "":
            self.text.config(tabs=self.textTabs)
        if self.textTakeFocus != "":
            self.text.config(takefocus=self.textTakeFocus)
        if self.textToDisplay != "":
            self.text.insert(tk.INSERT, self.textToDisplay)
        if self.textUnderline != "":
            self.text.config(underline=self.textUnderline)
        if self.textUndo != "":
            self.text.config(undo=int(self.textUndo))
        if self.textWidth != "":
            self.text.config(width=int(self.textWidth))
        if self.textWrap != "":
            self.text.config(wrap=self.textWrap)
        if self.textScrollX != "":
            self.text.config(xscrollcommand=int(self.textScrollX))
        if self.textScrollY != "":
            self.text.config(yscrollcommand=int(self.textScrollY))
        if self.textPlaceAnchor != '':
            self.text.place_configure(anchor=self.textPlaceAnchor)
        if self.textPlaceBordermode != '':
            self.text.place_configure(bordermode=self.textPlaceBordermode)
        if self.textPlaceHeight != '':
            self.text.place_configure(height=int(self.textPlaceHeight))
        if self.textPlaceRelHeight != '':
            self.text.place_configure(relheight=int(self.textPlaceRelHeight))
        if self.textPlaceWidth != '':
            self.text.place_configure(width=int(self.textPlaceWidth))
        if self.textPlaceRelWidth != '':
            self.text.place_configure(relwidth=int(self.textPlaceRelWidth))
        if self.textPlaceRelX != '':
            self.text.place_configure(relx=int(self.textPlaceRelX))
        if self.textPlaceRelY != '':
            self.text.place_configure(rely=int(self.textPlaceRelY))
        if self.textPlaceOffsetX != '':
            self.text.place_configure(x=int(self.textPlaceOffsetX))
        if self.textPlaceOffsetY != '':
            self.text.place_configure(y=int(self.textPlaceOffsetY))